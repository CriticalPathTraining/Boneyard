<?xml version="1.0" encoding="utf-8"?>
<uu:Workflow xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:msdad="clr-namespace:Microsoft.SharePoint.DesignTime.Activities.Design;assembly=Microsoft.SharePoint.DesignTime.Activities.Design" xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities" xmlns:p1="wf://workflow.windows.net/$Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:uu="clr-namespace:UpdateListItem.Update_Contact_From_Service;assembly=UpdateListItem" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Text</x:String>
      <x:String>Microsoft.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.Activities.Design</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>UpdateListItem</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <uu:Workflow.Implementation>
    <Sequence DisplayName="Root">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="PersonName" />
        <Variable x:TypeArguments="p:DynamicValue" Name="WebServiceResponse" />
        <Variable x:TypeArguments="x:String" Name="WebServiceQuery" />
        <Variable x:TypeArguments="x:String" Default="-1" Name="PersonID" />
        <Variable x:TypeArguments="x:String" Default="http://services.odata.org/V3/OData/OData.svc" Name="WebServiceUri" />
      </Sequence.Variables>
      <Sequence DisplayName="Get Person Name from ListItem">
        <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}" DisplayName="Get List Item Properties">
          <p1:LookupSPListItem.ItemId>
            <InArgument x:TypeArguments="x:Int32">
              <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                <p1:GetCurrentItemId />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ItemId>
          <p1:LookupSPListItem.ListId>
            <InArgument x:TypeArguments="s:Guid">
              <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                <p1:GetCurrentListId />
              </p:ExpressionContainerValue>
            </InArgument>
          </p1:LookupSPListItem.ListId>
          <p1:LookupSPListItem.Result>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">WebServiceResponse</mca:CSharpReference>
            </OutArgument>
          </p1:LookupSPListItem.Result>
        </p1:LookupSPListItem>
        <p:GetODataProperties DisplayName="Extract Person Name to Local Value">
          <p:GetODataProperties.Source>
            <InArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpValue x:TypeArguments="p:DynamicValue">WebServiceResponse</mca:CSharpValue>
            </InArgument>
          </p:GetODataProperties.Source>
          <scg:Dictionary x:TypeArguments="x:String, OutArgument">
            <OutArgument x:TypeArguments="x:String" x:Key="Title">
              <mca:CSharpReference x:TypeArguments="x:String">PersonName</mca:CSharpReference>
            </OutArgument>
          </scg:Dictionary>
        </p:GetODataProperties>
        <p1:WriteToHistory DisplayName="Log person name">
          <p1:WriteToHistory.Message>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">"Person name: " + PersonName</mca:CSharpValue>
            </InArgument>
          </p1:WriteToHistory.Message>
        </p1:WriteToHistory>
      </Sequence>
      <Sequence DisplayName="Get Person ID from Service">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:Int32" Name="ODataQueryResultCount" />
        </Sequence.Variables>
        <Assign DisplayName="Create OData Query">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">
              <mca:CSharpReference x:TypeArguments="x:String">WebServiceQuery</mca:CSharpReference>
            </OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">WebServiceUri + "/Persons?$select=ID&amp;$filter=Name eq '" + PersonName + "'"</mca:CSharpValue>
            </InArgument>
          </Assign.Value>
        </Assign>
        <p1:WriteToHistory DisplayName="Log Query Uri">
          <p1:WriteToHistory.Message>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">"REST Query URI: " + WebServiceQuery</mca:CSharpValue>
            </InArgument>
          </p1:WriteToHistory.Message>
        </p1:WriteToHistory>
        <p:HttpSend DisplayName="Execute OData Query" Method="GET">
          <p:HttpSend.RequestHeaders>
            <InArgument x:TypeArguments="p:DynamicValue">
              <p:SetDynamicValueProperties>
                <scg:Dictionary x:TypeArguments="x:String, InArgument">
                  <InArgument x:TypeArguments="x:String" x:Key="Accept">application/json;odata=verbose</InArgument>
                </scg:Dictionary>
              </p:SetDynamicValueProperties>
            </InArgument>
          </p:HttpSend.RequestHeaders>
          <p:HttpSend.ResponseContent>
            <OutArgument x:TypeArguments="p:DynamicValue">
              <mca:CSharpReference x:TypeArguments="p:DynamicValue">WebServiceResponse</mca:CSharpReference>
            </OutArgument>
          </p:HttpSend.ResponseContent>
          <p:HttpSend.Uri>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">WebServiceQuery</mca:CSharpValue>
            </InArgument>
          </p:HttpSend.Uri>
        </p:HttpSend>
        <p:CountDynamicValueItems DisplayName="Get Number of Items in Query Results">
          <p:CountDynamicValueItems.Result>
            <OutArgument x:TypeArguments="x:Int32">
              <mca:CSharpReference x:TypeArguments="x:Int32">ODataQueryResultCount</mca:CSharpReference>
            </OutArgument>
          </p:CountDynamicValueItems.Result>
          <InArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpValue x:TypeArguments="p:DynamicValue">WebServiceResponse</mca:CSharpValue>
          </InArgument>
        </p:CountDynamicValueItems>
        <p1:WriteToHistory DisplayName="Log count of returned items">
          <p1:WriteToHistory.Message>
            <InArgument x:TypeArguments="x:String">
              <mca:CSharpValue x:TypeArguments="x:String">"Number of returned items: " + ODataQueryResultCount</mca:CSharpValue>
            </InArgument>
          </p1:WriteToHistory.Message>
        </p1:WriteToHistory>
        <If DisplayName="Check if Person Found in OData Query">
          <If.Condition>
            <InArgument x:TypeArguments="x:Boolean">
              <mca:CSharpValue x:TypeArguments="x:Boolean">ODataQueryResultCount != 0</mca:CSharpValue>
            </InArgument>
          </If.Condition>
          <If.Then>
            <Sequence>
              <p:GetDynamicValueProperty x:TypeArguments="x:String" DisplayName="Extract Person ID" PropertyName="d/results/(0)/ID">
                <p:GetDynamicValueProperty.Result>
                  <OutArgument x:TypeArguments="x:String">
                    <mca:CSharpReference x:TypeArguments="x:String">PersonID</mca:CSharpReference>
                  </OutArgument>
                </p:GetDynamicValueProperty.Result>
                <p:GetDynamicValueProperty.Source>
                  <InArgument x:TypeArguments="p:DynamicValue">
                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">WebServiceResponse</mca:CSharpValue>
                  </InArgument>
                </p:GetDynamicValueProperty.Source>
              </p:GetDynamicValueProperty>
              <p1:WriteToHistory DisplayName="Log Person ID">
                <p1:WriteToHistory.Message>
                  <InArgument x:TypeArguments="x:String">
                    <mca:CSharpValue x:TypeArguments="x:String">"Person ID: " + PersonID</mca:CSharpValue>
                  </InArgument>
                </p1:WriteToHistory.Message>
              </p1:WriteToHistory>
            </Sequence>
          </If.Then>
          <If.Else>
            <p1:WriteToHistory DisplayName="Log No Results" Message="No results from query" />
          </If.Else>
        </If>
      </Sequence>
      <If DisplayName="If Person Found in OData Service">
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">PersonID!="-1"</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence>
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="PersonAge" />
              <Variable x:TypeArguments="x:String" Name="PersonStreetAddress" />
              <Variable x:TypeArguments="x:String" Name="PersonCity" />
              <Variable x:TypeArguments="x:String" Name="PersonState" />
              <Variable x:TypeArguments="x:String" Name="PersonZipCode" />
              <Variable x:TypeArguments="x:String" Name="PersonCountry" />
              <Variable x:TypeArguments="x:String" Name="PersonPhone" />
            </Sequence.Variables>
            <p1:WriteToHistory DisplayName="Now Updating Person Item" Message="Now updating person item" />
            <Assign DisplayName="Create OData Query">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">
                  <mca:CSharpReference x:TypeArguments="x:String">WebServiceQuery</mca:CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">WebServiceUri + "/Persons(" + PersonID + ")/PersonDetail"</mca:CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
            <p1:WriteToHistory DisplayName="Log REST Query URI">
              <p1:WriteToHistory.Message>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">"REST Query URI: " + WebServiceQuery</mca:CSharpValue>
                </InArgument>
              </p1:WriteToHistory.Message>
            </p1:WriteToHistory>
            <p:HttpSend DisplayName="Execute OData Query" Method="GET">
              <p:HttpSend.RequestHeaders>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:SetDynamicValueProperties>
                    <scg:Dictionary x:TypeArguments="x:String, InArgument">
                      <InArgument x:TypeArguments="x:String" x:Key="Accept">application/json;odata=verbose</InArgument>
                    </scg:Dictionary>
                  </p:SetDynamicValueProperties>
                </InArgument>
              </p:HttpSend.RequestHeaders>
              <p:HttpSend.ResponseContent>
                <OutArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpReference x:TypeArguments="p:DynamicValue">WebServiceResponse</mca:CSharpReference>
                </OutArgument>
              </p:HttpSend.ResponseContent>
              <p:HttpSend.Uri>
                <InArgument x:TypeArguments="x:String">
                  <mca:CSharpValue x:TypeArguments="x:String">WebServiceQuery</mca:CSharpValue>
                </InArgument>
              </p:HttpSend.Uri>
            </p:HttpSend>
            <p:GetODataProperties DisplayName="Extract OData Query Response">
              <p:GetODataProperties.Source>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <mca:CSharpValue x:TypeArguments="p:DynamicValue">WebServiceResponse</mca:CSharpValue>
                </InArgument>
              </p:GetODataProperties.Source>
              <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                <OutArgument x:TypeArguments="x:String" x:Key="d/Age">
                  <mca:CSharpReference x:TypeArguments="x:String">PersonAge</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="d/Address/Street">
                  <mca:CSharpReference x:TypeArguments="x:String">PersonStreetAddress</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="d/Address/City">
                  <mca:CSharpReference x:TypeArguments="x:String">PersonCity</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="d/Address/State">
                  <mca:CSharpReference x:TypeArguments="x:String">PersonState</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="d/Address/ZipCode">
                  <mca:CSharpReference x:TypeArguments="x:String">PersonZipCode</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="d/Address/Country">
                  <mca:CSharpReference x:TypeArguments="x:String">PersonCountry</mca:CSharpReference>
                </OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="d/Phone">
                  <mca:CSharpReference x:TypeArguments="x:String">PersonPhone</mca:CSharpReference>
                </OutArgument>
              </scg:Dictionary>
            </p:GetODataProperties>
            <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}" DisplayName="Update List Item">
              <p1:UpdateListItem.ItemId>
                <InArgument x:TypeArguments="x:Int32">
                  <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                    <p1:GetCurrentItemId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ItemId>
              <p1:UpdateListItem.ListId>
                <InArgument x:TypeArguments="s:Guid">
                  <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                    <p1:GetCurrentListId />
                  </p:ExpressionContainerValue>
                </InArgument>
              </p1:UpdateListItem.ListId>
              <p1:UpdateListItem.ListItemPropertiesDynamicValue>
                <InArgument x:TypeArguments="p:DynamicValue">
                  <p:SetDynamicValueProperties>
                    <scg:Dictionary x:TypeArguments="x:String, InArgument">
                      <InArgument x:TypeArguments="x:String" x:Key="Age">
                        <mca:CSharpValue x:TypeArguments="x:String">PersonAge</mca:CSharpValue>
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="BusinessPhone">
                        <mca:CSharpValue x:TypeArguments="x:String">PersonPhone</mca:CSharpValue>
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="StreetAddress">
                        <mca:CSharpValue x:TypeArguments="x:String">PersonStreetAddress</mca:CSharpValue>
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="City">
                        <mca:CSharpValue x:TypeArguments="x:String">PersonCity</mca:CSharpValue>
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="State_x002f_Province">
                        <mca:CSharpValue x:TypeArguments="x:String">PersonState</mca:CSharpValue>
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Zip_x002f_PostalCode">
                        <mca:CSharpValue x:TypeArguments="x:String">PersonZipCode</mca:CSharpValue>
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Country_x002f_Region">
                        <mca:CSharpValue x:TypeArguments="x:String">PersonCountry</mca:CSharpValue>
                      </InArgument>
                    </scg:Dictionary>
                  </p:SetDynamicValueProperties>
                </InArgument>
              </p1:UpdateListItem.ListItemPropertiesDynamicValue>
            </p1:UpdateListItem>
          </Sequence>
        </If.Then>
        <If.Else>
          <p1:WriteToHistory DisplayName="Log No Person Found" Message="No person found - do nothing" />
        </If.Else>
      </If>
      <sads:DebugSymbol.Symbol>d2RDOlxTdHVkZW50XE1vZHVsZXNcV29ya2Zsb3dcTGFiXFVwZGF0ZUxpc3RJdGVtXFVwZGF0ZUxpc3RJdGVtXFVwZGF0ZUNvbnRhY3RGcm9tU2VydmljZVxXb3JrZmxvdy54YW1sUysDyAIOAgEBMDQwOAIBAzE0MWICAQIzBVwQAwGDA10FuwEQAwGfArwBBcYCCgIBBDQHSB0DAZgDSQdUHgMBiwNVB1sbAwGEA2EHbBADAfQCbQdzGwMB7AJ0B4gBFAMB2gKJAQeSASIDAcsCkwEHmQEbAwHDApoBB7oBDAMBoAK/AQu/AVgCAQXDAQnBAhQCAQ3EAgnEApoBAgELPg1AKgMBoANFDUVrAwGaAzcNOSoDAZkDTA1MYwMBkgNRDVFdAwGMA1gNWGcDAYUDaQ1pmQEDAfwCZA1kYgMB9QJwDXBvAwHtAncNeysDAeoChQENhQFaAwHjAoABDYABawMB3AJ0aXRuAwHbAowBDYwBZwMB0wKQAQuQAWEDAcwClgENlgF/AwHEAp0BDZ0BZgMBoQKhAQu1ARYDAaoCuAELuAGQAQMBqALNAQvNAZ0BAwGdAs4BC9kBFAMBggLaAQvgAR8DAfQB4QEL9QEYAwHWAfYBC5MCIgIBbZQCC8ACHwIBDsQCecQClwECAQw/Dz8mBAGgAwE4DzgmBAGZAwF5R3llAwHrAqIBDa0BKQMBswKuAQ20ASEDAasCuAF2uAGNAQMBqQLNAYABzQGaAQMBngLWARHWAYgBAwGQAtEBEdEBZgMBgwLdARHdAXMDAfUB5AER6AEvAwHyAfIBEfIBXgMB5QHtARHtAW8DAdgB4QFt4QFyAwHXAYcCEYcCYgMByQH+ARH+AWADAbwBjQIRjQJkAwGvAYQCEYQCYQMBogH5ARH5AWcDAZUBgQIRgQJqAwGIAYoCEYoCZAIBe5ACEZACYgIBbqUCEb0CLwIBEZ4CEaACLgIBEJcCEZkCLgIBD6UBE6UBYQMBvAKqAROqAWkDAbUCogGuAaIBwAEDAbQCsQETsQFpAwGsAuYBS+YBaQMB8wGoAheoAl4CAWCrAherAmACAVO0Ahe0AmACAUaxAhexAl8CATm3Ahe3AmICASyuAheuAmgCAR+6Ahe6AmICARKfAhOfAioDARABmAITmAIqAwEPAQ==</sads:DebugSymbol.Symbol>
    </Sequence>
  </uu:Workflow.Implementation>
</uu:Workflow>